// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and generates access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User GUID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "access_token \u0026 refresh_token",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "User id is empty",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refreshes token pair",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "RefreshToken",
                "parameters": [
                    {
                        "description": "Refresh Token",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "access_token \u0026 refresh_token",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Token is invalid",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Session is invalid",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_transport_http.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message",
                    "type": "string"
                }
            }
        },
        "internal_transport_http.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "internal_transport_http.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Access token",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "Refresh token",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Medods",
	Description:      "This is the test service for providing JWT",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
